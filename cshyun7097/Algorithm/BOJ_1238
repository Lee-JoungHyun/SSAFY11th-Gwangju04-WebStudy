import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static int N, M, X;
    static List<Node>[] arr;
    static List<Node>[] arrReverse;

    static class Node implements Comparable<Node> {
        int idx, cost;

        public Node(int idx, int cost) {
            this.idx = idx;
            this.cost = cost;
        }

        @Override
        public int compareTo(Node o) {
            return this.cost - o.cost;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        X = Integer.parseInt(st.nextToken());
        arr = new ArrayList[N + 1];
        arrReverse = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) {
            arr[i] = new ArrayList<>();
            arrReverse[i] = new ArrayList<>();
        }

        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());
            arr[start].add(new Node(end, cost));
            arrReverse[end].add(new Node(start, cost));
        }
        int[] distGo = dijkstrat(X, arr);
        int[] distReverse = dijkstrat(X, arrReverse);
        int max = 0;
        for (int i = 1; i <= N; i++) {
            max = Math.max(max, distGo[i] + distReverse[i]);
        }
        System.out.println(max);
    }

    private static int[] dijkstrat(int start, List<Node>[] arr) {
        int[] dist = new int[N + 1];
        boolean[] visited = new boolean[N + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);
        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.offer(new Node(start, 0));
        dist[start] = 0;

        while (!pq.isEmpty()) {
            int idx = pq.poll().idx;
            if (visited[idx]) continue;
            visited[idx] = true;
            for (Node node : arr[idx]) {
                if (dist[node.idx] > dist[idx] + node.cost) {
                    dist[node.idx] = dist[idx] + node.cost;
                    pq.offer(new Node(node.idx, dist[node.idx]));
                }
            }
        }
        return dist;
    }
}
