import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class BOJ_20007 {
    static int N, M, X, Y;
    static List<Node>[] arr;

    static class Node implements Comparable<Node> {
        int idx, cost;

        public Node(int idx, int cost) {
            this.idx = idx;
            this.cost = cost;
        }

        @Override
        public int compareTo(Node o) {
            return this.cost - o.cost;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        X = Integer.parseInt(st.nextToken());
        Y = Integer.parseInt(st.nextToken());       //시작점

        arr = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            arr[i] = new ArrayList<>();
        }

        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());
            arr[start].add(new Node(end, cost));
            arr[end].add(new Node(start, cost));
        }

        int[] distance = dijkstra(Y);
        Arrays.sort(distance);
//        System.out.println(Arrays.toString(distance));

        System.out.println(getDays(distance));
    }

    private static int getDays(int[] distance) {
        int total = 0;
        int day = 1;
        for (int i = 0; i < distance.length; i++) {
            if (distance[i] * 2 > X) {
                return -1;
            }
            total += distance[i] * 2;

            if (total > X) {
                day++;
                total = distance[i] * 2;
            }
        }
        return day;
    }

    private static int[] dijkstra(int start) {
        boolean[] visited = new boolean[N];
        int[] dist = new int[N];
        Arrays.fill(dist, Integer.MAX_VALUE);
        PriorityQueue<Node> pq = new PriorityQueue<>();

        dist[start] = 0;
        pq.offer(new Node(start, 0));

        while (!pq.isEmpty()) {
            int idx = pq.poll().idx;
            if (visited[idx]) continue;
            visited[idx] = true;

            for (Node node : arr[idx]) {
                if (dist[node.idx] > dist[idx] + node.cost) {
                    dist[node.idx] = dist[idx] + node.cost;
                    pq.offer(new Node(node.idx, dist[node.idx]));
                }
            }
        }
        return dist;
    }
}
